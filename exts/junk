  document.getElementById("variablevaluesbutton").addEventListener("click", function(e) {
    //the node's variable is changed to the input from the nodevariable div
    labelnode.data('variable', document.getElementById("nodevariable").value);
    //newval is the old value of the node + the new value of the node from the nodevariable div
    newval = Number(labelnode.data('value')) + Number(document.getElementById("nodevariablevalue").value);
    console.log("nodevariablevalue: " + Number(document.getElementById("nodevariablevalue").value))
    console.log("labelnode value:" + Number(labelnode.data('value')));
    labelnode.data('value', newval);
  });

var makeTippy = function(node, text){
  var ref = node.popperRef();

  // unfortunately, a dummy element must be passed
  // as tippy only accepts a dom element as the target
  // https://github.com/atomiks/tippyjs/issues/661
  var dummyDomEle = document.createElement('div');

  var tip = tippy( dummyDomEle, {
    onCreate: function(instance){ // mandatory
      // patch the tippy's popper reference so positioning works
      // https://atomiks.github.io/tippyjs/misc/#custom-position
      instance.popperInstance.reference = ref;
    },
    lazy: false, // mandatory
    trigger: 'manual', // mandatory

    // dom element inside the tippy:
    content: function(){ // function can be better for performance
      var div = document.createElement('div');

      div.innerHTML = text;

      return div;
    },

    // your own preferences:
    interactive: true,
    arrow: true,
    placement: 'bottom',
    hideOnClick: false,
    multiple: true,
    sticky: true,
  } );

  return tip;
};


//ctxmenu extension
cy.cxtmenu({
  selector: 'node',

  commands: [
    {
      content: 'Make tooltip',
      select: function(ele){
        console.log( ele.id() );
        
        //var tipele = makeTippy(ele)
        //tipele.show();
       // cy.$(ele).classes('red');
      }
    },

    {
      content: 'Text',
      select: function(ele){
        console.log( ele.position() );
      }
    }
  ]
});

cy.cxtmenu({
  selector: 'edge',

  commands: [
    {
      content: 'bg1',
      select: function(){
        console.log( 'bg1' );
      }
    },

    {
      content: 'bg2',
      select: function(){
        console.log( 'bg2' );
      }
    }
  ]
});
